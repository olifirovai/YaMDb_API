openapi: 3.0.2
info:
  title: 'YaMDb API'
  version: v.1.0.0
  description: |
    requests to API starts with `/api/v1/`

    # Description
    The **YaMDb** project collects users' reviews on the artworks. Listings are classified into the following categories: "Books", "Movies", "Music".

    # User registration algorithm
    1. The user sends a request with the parameter `email` on `/auth/email/`.
    2. **YaMDB** sends a confirmation code (`confirmation_code`) on  `email` .
    3. The user sends a request with the parameters `email` and `confirmation_code` to `/auth/token/`, in response the user receives a `token` (JWT-token).
    4. If necessary, the user sends a PATCH-request to `/users/me/` and fills in fields in his profile (description of fields - in documentation).

    # User roles
    - **Anonymous** — can view descriptions of artworks, read reviews and comments.
    - **Authenticated user** — can, as well as **Anonymous**, read everything, in addition, he/she can post reviews and rate artworks ( movies/books/songs), can comment on others' reviews and rate them; can edit and delete **his/her** reviews and comments.
    - **Модератор** — the same rights as **Authenticated user** and the right to delete **any** reviews and comments.
    - **Moderator** — all rights to manage the project and its content. Can create and delete categories and artworks. Can assign roles to users.
    - **Administrator Django** — the same rights as **Administrator**.


servers:
  - url: /api/v1/

tags:
  - name: REVIEWS
    description: Reviews
  - name: COMMENTS
    description: Comments on reviews
  - name: AUTH
    description: Authentication
  - name: USERS
    description: Users
  - name: CATEGORIES
    description: Categories (types) of artworks
  - name: GENRES
    description: Genre Categories
  - name: TITLES
    description: Titles of artworks to which reviews are written (a certain film, book or song).

paths:
  /titles/{title_id}/reviews/:
    parameters:
      - name: title_id
        in: path
        required: true
        description: Object ID
        schema:
          type: number
    get:
      tags:
        - REVIEWS
      description: |
        Get a list of all reviews.

        Permissions: **Available without token.**
      responses:
        200:
          description: Reviews list with pagination
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    count:
                      type: number
                    next:
                      type: string
                    previous:
                      type: string
                    results:
                      type: array
                      items:
                        $ref: '#/components/schemas/Review'
        404:
          description: The object not found.
    post:
      tags:
        - REVIEWS
      description: |
        Create a new review. User may post only one review per object.

        Permissions: **Authenticated users.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        200:
          description: 'New review'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        400:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: Requires JWT token
        404:
          description: The object not found.
      security:
      - jwt_auth:
        - write:user,moderator,admin
  /titles/{title_id}/reviews/{review_id}/:
    parameters:
      - name: title_id
        in: path
        required: true
        description: Object ID
        schema:
          type: number
      - name: review_id
        in: path
        required: true
        description: Review ID
        schema:
          type: number
    get:
      tags:
        - REVIEWS
      description: |
        Get a review by id.

        Permissions: **Available without token.**
      responses:
        200:
          description: Review
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        404:
          description: The object not found.
    patch:
      tags:
        - REVIEWS
      description: |
        Partially update the review by id.

        Permissions: **Reviewer, moderator or administrator.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        200:
          description: Review
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        400:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: Requires JWT token
        403:
          description: No access rights
        404:
          description: The object not found.
      security:
      - jwt_auth:
        - write:user,moderator,admin
    delete:
      tags:
        - REVIEWS
      description: |
        Delete review by id

        Permissions: **Reviewer, moderator or administrator.**
      responses:
        204:
          description: ''
        401:
          description: Requires JWT token
        403:
          description: No access rights
        404:
          description: The object not found.
      security:
      - jwt_auth:
        - write:user,moderator,admin

  /titles/{title_id}/reviews/{review_id}/comments/:
    parameters:
      - name: title_id
        in: path
        required: true
        description: Object ID
        schema:
          type: number
      - name: review_id
        in: path
        required: true
        description: Review ID
        schema:
          type: number
    get:
      tags:
        - COMMENTS
      description: |
        Get a list of all comments to the review by id

        Permissions: **Available without token.**
      responses:
        200:
          description: List of comments with pagination
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    count:
                      type: number
                    next:
                      type: string
                    previous:
                      type: string
                    results:
                      type: array
                      items:
                        $ref: '#/components/schemas/Comment'
        404:
          description: The object or review not found.
    post:
      tags:
        - COMMENTS
      description: |
        Create a new comment for the review.

        Permissions: **Authenticated users.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
        400:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: Requires JWT token
        404:
          description: The object or review not found.
      security:
      - jwt_auth:
        - write:user,moderator,admin

  /titles/{title_id}/reviews/{review_id}/comments/{comment_id}/:
    parameters:
      - name: title_id
        in: path
        required: true
        description: Object ID
        schema:
          type: number
      - name: review_id
        in: path
        required: true
        description: Review ID
        schema:
          type: number
      - name: comment_id
        in: path
        required: true
        description: Comment ID
        schema:
          type: number
    get:
      tags:
        - COMMENTS
      description: |
        Get a comment for a review by id.

        Permissions: **Available without token.**
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
        404:
          description: The object or review or comment not found.
    patch:
      tags:
        - COMMENTS
      description: |
        Partially update the comment on the review by id.

        Permissions: **Reviewer, moderator or administrator.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
        400:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: Requires JWT token
        403:
          description: No access rights
        404:
          description: The object or review or comment not found.
      security:
      - jwt_auth:
        - write:user,moderator,admin
    delete:
      tags:
        - COMMENTS
      description: |
        Delete a comment to the review by id.

        Permissions: **Reviewer, moderator or administrator.**
      responses:
        204:
          description: ''
        401:
          description: Requires JWT token
        403:
          description: No access rights
        404:
          description: The object or review or comment not found.
      security:
      - jwt_auth:
        - write:user,moderator,admin

  /auth/token/:
    post:
      tags:
        - AUTH
      description: Getting a JWT token in exchange for email and confirmation_code.
      requestBody:
        content:
          application/json:
            schema:
              required:
                - email
                - confirmation_code
              properties:
                email:
                  type: string
                confirmation_code:
                  type: string
                  writeOnly: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: ''
        400:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /auth/email/:
    post:
      tags:
        - AUTH
      description: Sending confirmation_code to the email.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              required:
                - email
              properties:
                email:
                  type: string
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  email:
                    type: string
                required:
                - email
          description: ''

  /users/:
    get:
      tags:
        - USERS
      description: |
        Get a list of all users.

        Permissions: **Administrator**
      parameters:
      - name: search
        in: query
        description: username user to filter, search by username
        schema:
          type: string
      responses:
        200:
          description: Users list with pagination
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    count:
                      type: number
                    next:
                      type: string
                    previous:
                      type: string
                    results:
                      type: array
                      items:
                        $ref: '#/components/schemas/User'
        401:
          description: Requires JWT token
      security:
      - jwt_auth:
        - read:admin
        - write:admin
    post:
      tags:
        - USERS
      description: |
        User creation.

        Permissions: **Administrator**"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: Requires JWT token
        403:
          description: No access rights
      security:
      - jwt_auth:
        - read:admin
        - write:admin
  /users/{username}/:
    parameters:
      - name: username
        in: path
        required: true
        description: User username
        schema:
          type: string
    get:
      tags:
        - USERS
      description: |
        Get user by username.

        Permissions: **Administrator**
      responses:
        200:
          description: User object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Requires JWT token
        403:
          description: No access rights
        404:
          description: User not found
      security:
      - jwt_auth:
        - read:admin
        - write:admin
    patch:
      tags:
        - USERS
      description: |
        Change user data by username.

        Permissions: **Administrator**"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: Requires JWT token
        403:
          description: No access rights
        404:
          description: User not found
      security:
      - jwt_auth:
        - read:admin
        - write:admin
    delete:
      tags:
        - USERS
      description: |
        Delete user by username.

        Permissions: **Administrator**"
      responses:
        204:
          description: User deleted
        401:
          description: Requires JWT token
        403:
          description: No access rights
        404:
          description: User not found
      security:
      - jwt_auth:
        - read:admin
        - write:admin

  /users/me/:
    get:
      tags:
        - USERS
      description: |
        Get personal account details

        Permissions: **Any authorized user**
      responses:
        200:
          description: The object of one's account
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/User'
      security:
      - jwt_auth:
        - read:admin,moderator,user
        - write:admin,moderator,user
    patch:
      tags:
        - USERS
      description: |
        Change the personal account details

        Permissions: **Any authorized user**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      security:
      - jwt_auth:
        - read:admin,moderator,user
        - write:admin,moderator,user

  /categories/:
    get:
      tags:
        - CATEGORIES
      description: |
        Get a list of all categories

        Permissions: **Available without token.**
      parameters:
      - name: search
        in: query
        description: filters by category name
        schema:
          type: string
      responses:
        200:
          description: List of categories with pagination
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    count:
                      type: number
                    next:
                      type: string
                    previous:
                      type: string
                    results:
                      type: array
                      items:
                        $ref: '#/components/schemas/Category'
    post:
      tags:
        - CATEGORIES
      description: |
        Create a category

        Permissions: **Administrator**"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        200:
          description: List of categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: Requires JWT token
        403:
          description: No access rights
      security:
      - jwt_auth:
        - read:admin
        - write:admin
  /categories/{slug}/:
    delete:
      tags:
        - CATEGORIES
      description: |
        Delete a category

        Permissions: **Administrator**"
      parameters:
      - name: slug
        in: path
        required: true
        description: Category Slug
        schema:
          type: string
      responses:
        204:
          description: ''
        401:
          description: Requires JWT token
        403:
          description: No access rights
        404:
          description: Category not found
      security:
      - jwt_auth:
        - read:admin
        - write:admin

  /titles/:
    get:
      tags:
        - TITLES
      description: |
        Get a list of all titles


        Permissions: **Available without token.**
      parameters:
        - name: category
          in: query
          description: filters by category's slug
          schema:
            type: string
        - name: genre
          in: query
          description: filters by genre's slug
          schema:
            type: string
        - name: name
          in: query
          description: filters by part of an object name
          schema:
            type: string
        - name: year
          in: query
          description: filters by year
          schema:
            type: number
      responses:
        200:
          description: List of objects with pagination
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    count:
                      type: number
                    next:
                      type: string
                    previous:
                      type: string
                    results:
                      type: array
                      items:
                        $ref: '#/components/schemas/Title'
    post:
      tags:
        - TITLES
      description: |
        Create an title for reviews.

        Permissions: **Administrator**.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TitleCreate'
      responses:
        200:
          description: List of objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Title'
        400:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: Requires JWT token
        403:
          description: No access rights
      security:
      - jwt_auth:
        - read:admin
        - write:admin
  /titles/{titles_id}/:
    parameters:
      - name: titles_id
        in: path
        required: true
        description: Object ID
        schema:
          type: number
    get:
      tags:
        - TITLES
      description: |
        Title information


        Permissions: **Available without token.**
      responses:
        200:
          description: title
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Title'
        404:
          description: The object not found.
    patch:
      tags:
        - TITLES
      description: |
        Update title information


        Permissions: **Administrator**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TitleCreate'
      responses:
        200:
          description: Object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Title'
        401:
          description: Requires JWT token
        403:
          description: No access rights
        404:
          description: The object not found.
      security:
      - jwt_auth:
        - read:admin
        - write:admin
    delete:
      tags:
        - TITLES
      description: |
        Delete title.

        Permissions: **Administrator**.
      responses:
        204:
          description: ''
        401:
          description: Requires JWT token
        403:
          description: No access rights
        404:
          description: The object not found.
      security:
      - jwt_auth:
        - read:admin
        - write:admin

  /genres/:
    get:
      tags:
        - GENRES
      description: |
        Get a list of all genres

        Permissions: **Available without token.**
      parameters:
      - name: search
        in: query
        description: filters by genre's name
        schema:
          type: string
      responses:
        200:
          description: List of genres with pagination
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    count:
                      type: number
                    next:
                      type: string
                    previous:
                      type: string
                    results:
                      type: array
                      items:
                        $ref: '#/components/schemas/Genre'
    post:
      tags:
        - GENRES
      description: |
        Create a genre

        Permissions: **Administrator**.
      responses:
        200:
          description: List of genres
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
        400:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: Requires JWT token
        403:
          description: No access rights
      security:
      - jwt_auth:
        - read:admin
        - write:admin

  /genres/{slug}/:
    delete:
      tags:
        - GENRES
      description: |
        Delete a genre

        Permissions: **Administrator**.
      parameters:
      - name: slug
        in: path
        required: true
        description: Genre Slug
        schema:
          type: string
      responses:
        204:
          description: ''
        401:
          description: Requires JWT token
        403:
          description: No access rights
        404:
          description: Genre not found
      security:
      - auth:
        - read:admin
        - write:admin

components:
  schemas:
    User:
      title: User
      type: object
      description: Detailed information about the user
      required:
          - username
          - email
      properties:
        first_name:
          type: string
          title: First name
        last_name:
          type: string
          title: Last name
        username:
          type: string
          title: Username
        bio:
          type: string
          title: Bio
        email:
          type: string
          title: Email address
        role:
          type: string
          description: Administrator, moderator or user. Default `user`.
          enum:
            - user
            - moderator
            - admin

    Title:
      title: Object
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          title: Artwork ID
          readOnly: true
        name:
          type: string
          title: Name
        year:
          type: number
          title: Production year
        rating:
          type: number
          readOnly: True
          title: Rating based on reviews.
        description:
          type: string
          title: Description
        genre:
          type: array
          items:
            $ref: '#/components/schemas/Genre'
        category:
          $ref: '#/components/schemas/Category'
    TitleCreate:
      title: Object for change
      type: object
      required:
        - name
      properties:
        name:
          type: string
          title: Name
        year:
          type: number
          title: Production year
        description:
          type: string
          title: Description
        genre:
          type: array
          items:
            type: string
            title: Genre Slug
        category:
          type: string
          title: Category Slug

    Genre:
      title: Ganre
      type: object
      required:
        - name
      properties:
        name:
          type: string
          title: Genre's name
        slug:
          type: string
          title: Field "slug"

    Review:
      title: Review
      type: object
      description: Detailed review information
      required:
          - text
          - score
      properties:
        id:
          type: integer
          title: Review ID
          readOnly: true
        text:
          type: string
          title: Review's text
        author:
          type: string
          title: user username
          readOnly: true
        score:
          type: integer
          title: Score
          minimum: 1
          maximum: 10
        pub_date:
          type: string
          format: date-time
          title: Date of review posting
          readOnly: true

    ValidationError:
      title: Validation error
      type: object
      properties:
        field_name:
          type: array
          items:
            type: string

    Token:
      title: Token
      type: object
      properties:
        token:
          type: string
          title: access token

    Comment:
      title: Comment
      type: object
      description: Detailed comment information
      required:
        - text
      properties:
        id:
          type: integer
          title: Comment ID
          readOnly: true
        text:
          type: string
          title: Comment's text
        author:
          type: string
          title: Comment author's username
          readOnly: true
        pub_date:
          type: string
          format: date-time
          title: Date of comment posting
          readOnly: true

    Category:
      title: Category
      type: object
      required:
        - name
      properties:
        name:
          type: string
          title: Name of object category
        slug:
          type: string
          title: Field slug

  securitySchemes:
    jwt_auth:
      type: apiKey
      name: Bearer
      in: header
